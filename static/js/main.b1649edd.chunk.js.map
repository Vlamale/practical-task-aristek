{"version":3,"sources":["context/ToDoContext/action.ts","img/tasks.svg","components/Dashboard.tsx","img/logo.svg","img/profile.svg","components/Header.tsx","context/ToDoContext/ToDoContext.ts","components/ToDo.tsx","components/CompletedToDo.tsx","components/ToDoForm.tsx","components/UncompletedToDo.tsx","components/ToDoList.tsx","pages/MainPage.tsx","App.tsx","index.tsx"],"names":["ReactActionTypes","Dashboard","className","src","tasks","Header","logo","profile","initialState","setUncompletedList","setCompletedList","setToDoText","dispatch","editToDoId","ToDoContext","createContext","reducer","state","action","type","SET_TO_DO_TEXT","payload","SET_UNCOMPLETED_LIST","SET_COMPLETED_LIST","ENABLE_EDIT","DISABLE_EDIT","ToDo","title","completed","id","useContext","checked","onChange","checkedTodo","prev","filteredList","filter","toDo","onClick","navigator","clipboard","writeText","CompletedToDo","toDos","length","map","userId","ToDoForm","useState","toDoText","useEffect","createToDo","a","trim","alert","fetch","method","body","JSON","stringify","headers","data","json","newToDo","Date","now","editToDo","editList","i","push","submitToDo","e","preventDefault","onSubmit","placeholder","value","target","UncompletedToDo","total","ToDoList","uncompletedList","completedList","useReducer","cleanUpFunction","processedData","reduce","acc","item","unCompleted","Provider","MainPage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1649edd.chunk.js","sourcesContent":["import { IToDo } from \"../../types\"\n\nexport enum ReactActionTypes {\n    SET_TO_DO_TEXT = 'SET_TO_DO_TEXT',\n    SET_TO_DO_TEXT_SETTER = 'SET_TO_DO_TEXT_SETTER',\n    SET_UNCOMPLETED_LIST = 'SET_UNCOMPLETED_LIST',\n    SET_COMPLETED_LIST = 'SET_COMPLETED_LIST',\n    ENABLE_EDIT = 'ENABLE_EDIT',\n    DISABLE_EDIT = 'DISABLE_EDIT'\n}\n\ninterface ISetToDoText {\n    type: ReactActionTypes.SET_TO_DO_TEXT,\n    payload: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport const setToDoTextAction = (payload: React.Dispatch<React.SetStateAction<string>>): ISetToDoText => {\n    return {\n        type: ReactActionTypes.SET_TO_DO_TEXT,\n        payload\n    }\n}\n\ninterface ISetUncompletedList {\n    type: ReactActionTypes.SET_UNCOMPLETED_LIST ,\n    payload: React.Dispatch<React.SetStateAction<IToDo[]>>\n}\n\nexport const setUncompletedListAction = (payload: React.Dispatch<React.SetStateAction<IToDo[]>>): ISetUncompletedList => {\n    return {\n        type: ReactActionTypes.SET_UNCOMPLETED_LIST,\n        payload\n    }\n}\n\ninterface ISetCompletedList {\n    type: ReactActionTypes.SET_COMPLETED_LIST ,\n    payload: React.Dispatch<React.SetStateAction<IToDo[]>>\n}\n\nexport const setCompletedListAction = (payload: React.Dispatch<React.SetStateAction<IToDo[]>>): ISetCompletedList => {\n    return {\n        type: ReactActionTypes.SET_COMPLETED_LIST,\n        payload\n    }\n}\n\ninterface IEnableEdit {\n    type: ReactActionTypes.ENABLE_EDIT,\n    payload: number\n}\n\nexport const enableEditAction = (payload: number): IEnableEdit => {\n    return {\n        type: ReactActionTypes.ENABLE_EDIT,\n        payload\n    }\n}\n\ninterface IDisableEdit {\n    type: ReactActionTypes.DISABLE_EDIT,\n    payload: null\n}\n\nexport const disableEditAction = (): IDisableEdit => {\n    return {\n        type: ReactActionTypes.DISABLE_EDIT,\n        payload: null\n    }\n}\n\nexport type ActionType = ISetToDoText | ISetUncompletedList | ISetCompletedList | IEnableEdit | IDisableEdit","export default __webpack_public_path__ + \"static/media/tasks.9e85abfa.svg\";","import React from \"react\"\nimport tasks from '../img/tasks.svg'\n\nconst Dashboard: React.FC = () => {\n    return (\n        <nav className=\"dashboard\">\n            <ul className=\"dashboard__list\">\n                <li className=\"dashboard__item\">\n                    <img className=\"dashboard__item_image\" src={tasks} />\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Dashboard","export default __webpack_public_path__ + \"static/media/logo.43aadb3a.svg\";","export default __webpack_public_path__ + \"static/media/profile.b4d247d4.svg\";","import React from \"react\"\nimport logo from '../img/logo.svg'\nimport profile from '../img/profile.svg'\n\nconst Header: React.FC = () => {\n    return (\n        <header className=\"header\">\n            <div className=\"header-left\">\n                <img className=\"header-left__logo\" src={logo} />\n                <h1 className=\"header-left__title\">Task</h1>\n            </div>\n            <div className=\"header-right\">\n                <span className=\"header-right__user-name\">Leanne Graham</span>\n                <img className=\"header-right__user-image\" src={profile} />\n                <i className=\"header-right__dropdown\"></i>\n            </div>\n        </header>\n    )\n}\n\nexport default Header","import React, { createContext } from \"react\";\nimport { IToDo } from \"../../types\";\nimport { ActionType, ReactActionTypes } from \"./action\";\n\ninterface IInitialState {\n    setUncompletedList: React.Dispatch<React.SetStateAction<IToDo[]>>\n    setCompletedList: React.Dispatch<React.SetStateAction<IToDo[]>>\n    setToDoText: React.Dispatch<React.SetStateAction<string>>\n    dispatch: React.Dispatch<ActionType>\n    editToDoId: number | null\n}\n\nexport const initialState = {\n    setUncompletedList: () => { },\n    setCompletedList: () => { },\n    setToDoText: () => { },\n    dispatch: () => null,\n    editToDoId: null\n}\n\nexport const ToDoContext = createContext<IInitialState>(initialState)\n\nexport const reducer = (state: IInitialState = initialState, action: ActionType) => {\n    switch (action.type) {\n        case ReactActionTypes.SET_TO_DO_TEXT:\n            return { ...state, setToDoText: action.payload }\n        case ReactActionTypes.SET_UNCOMPLETED_LIST:\n            return { ...state, setUncompletedList: action.payload }\n        case ReactActionTypes.SET_COMPLETED_LIST:\n            return { ...state, setCompletedList: action.payload }\n        case ReactActionTypes.ENABLE_EDIT:\n            return {...state, editToDoId: action.payload}\n        case ReactActionTypes.DISABLE_EDIT:\n            return {...state, editToDoId: action.payload}\n        default:\n            return state\n    }\n}","import React, { useContext } from \"react\"\nimport { enableEditAction } from \"../context/ToDoContext/action\"\nimport {ToDoContext} from \"../context/ToDoContext/ToDoContext\"\nimport { IToDo } from \"../types\"\n\nconst ToDo: React.FC<IToDo> = ({ title, completed, id }) => {\n    const {setUncompletedList, setCompletedList, setToDoText, dispatch} = useContext(ToDoContext)\n\n    const checkHandler = () => {\n        let checkedTodo: IToDo\n        if (!completed) {\n            setUncompletedList(prev => {\n                const filteredList = prev.filter(toDo => {\n                    if (toDo.id === id) {\n                        checkedTodo = {\n                            ...toDo,\n                            completed: true\n                        }\n                    }\n                    return toDo.id !== id\n                })\n                return [...filteredList]\n            })\n            setCompletedList(prev => [checkedTodo, ...prev])\n        } else {\n            setCompletedList(prev => {\n                const filteredList = prev.filter(toDo => {\n                    if (toDo.id === id) {\n                        checkedTodo = {\n                            ...toDo,\n                            completed: false\n                        }\n                    }\n                    return toDo.id !== id\n                })\n                return [...filteredList]\n            })\n            setUncompletedList(prev => [...prev, checkedTodo])\n        }\n    }\n\n    const removeToDo = () => {\n        if (!completed) {\n            setUncompletedList(prev => {\n                return prev.filter(toDo => toDo.id !== id)\n            })\n        } else {\n            setCompletedList(prev => {\n                return prev.filter(toDo => toDo.id !== id)\n            })\n        }\n    }\n\n    const editToDo = () => {\n        dispatch(enableEditAction(id))\n        setToDoText(title)\n    }\n\n    const copyToDo = () => {\n        navigator.clipboard.writeText(title)\n    }\n\n    return (\n        <li className=\"to-do-item\">\n            <div className=\"to-do-item__data\">\n                <input className=\"to-do-item__checkbox\" type=\"checkbox\" checked={completed} onChange={checkHandler} />\n                <span className=\"to-do-item__name\">{title}</span>\n            </div>\n\n            <div className={!completed ? 'to-do-item__dashboard' : ''}>\n                {completed === false &&\n                    <>\n                        <button className=\"to-do-item__btn to-do-item__btn_edit\" onClick={editToDo}/>\n                        <button className=\"to-do-item__btn to-do-item__btn_copy\" onClick={copyToDo} />\n                    </>}\n                <button className=\"to-do-item__btn to-do-item__btn_delete\" onClick={removeToDo}/>\n            </div>\n        </li>\n    )\n}\n\nexport default ToDo","import React from \"react\"\nimport { IToDo } from \"../types\"\nimport ToDo from \"./ToDo\"\n\ninterface ICompletedToDoProps {\n    toDos: IToDo[]\n}\n\nconst CompletedToDo: React.FC<ICompletedToDoProps> = ({toDos}) => {\n    \n    return (\n        <div className=\"completed\">\n            <h3 className=\"list-title\">Completed ({toDos.length})</h3>\n\n            {toDos.map((toDo) => (\n                <ToDo key={toDo.id} title={toDo.title} completed={toDo.completed} userId={toDo.userId} id={toDo.id} />\n            ))}\n        </div>\n    )\n}\n\nexport default CompletedToDo","import React, { useContext, useEffect, useState } from \"react\"\nimport { disableEditAction, setToDoTextAction } from \"../context/ToDoContext/action\"\nimport {ToDoContext} from \"../context/ToDoContext/ToDoContext\"\nimport { IToDo } from \"../types\"\n\nconst ToDoForm: React.FC = () => {\n    const [toDoText, setToDoText] = useState('')\n    const {setUncompletedList, editToDoId, dispatch} = useContext(ToDoContext)\n\n    useEffect(() => {\n        dispatch(setToDoTextAction(setToDoText))\n    }, [])\n\n    const createToDo = async () => {\n        if (!toDoText.trim().length) {\n            setToDoText('')\n            return alert('Todo should not be empty.')\n        }\n        const data = await fetch('https://jsonplaceholder.typicode.com/todos?_limit=10', {\n            method: 'POST',\n            body: JSON.stringify({\n                title: toDoText,\n                userId: 1,\n                completed: false\n            }),\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n              },\n        })\n        const newToDo: IToDo = await data.json()\n        newToDo.id = Date.now()\n        \n        setUncompletedList(prev => [...prev, newToDo]);\n        setToDoText('')\n    }\n\n    const editToDo = async () => {\n        if (!toDoText.trim().length) {\n            setToDoText('')\n            return alert('Todo should not be empty.')\n        }\n        const data = await fetch(`https://jsonplaceholder.typicode.com/todos/${editToDoId}`, {\n            method: 'PATCH',\n            body: JSON.stringify({\n                id: editToDoId,\n                title: toDoText,\n                userId: 1,\n                completed: false\n            }),\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n              },\n        })\n        \n        const editToDo: IToDo = await data.json()\n        setUncompletedList(prev => {\n            const editList = []\n            for (let i = 0; i < prev.length; i++) {\n                if (prev[i].id === editToDo.id) {\n                    prev[i] = editToDo\n                }\n                editList.push(prev[i])\n            }\n            return editList\n        })\n        setToDoText('')\n        dispatch(disableEditAction())\n    }\n\n    const submitToDo = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (editToDoId) {\n            await editToDo()\n        } else {\n            await createToDo()\n        }\n    }\n\n    return (\n        <form className=\"to-do-form\" onSubmit={submitToDo}>\n            <input\n                className=\"to-do-form__input\"\n                placeholder=\"+ Add a task, press Enter to save\"\n                value={toDoText}\n                onChange={e => setToDoText(e.target.value)}\n            />\n            {<button className=\"to-do-form__add-btn\">{editToDoId ? 'Save' : 'Add'}</button>}\n        </form>\n    )\n}\n\nexport default ToDoForm","import React from \"react\"\nimport { IToDo } from \"../types\"\nimport ToDo from \"./ToDo\"\nimport ToDoForm from \"./ToDoForm\"\n\ninterface IUncompletedToDoProps {\n    toDos: IToDo[],\n    total: number\n}\n\nconst UncompletedToDo: React.FC<IUncompletedToDoProps> = ({toDos, total}) => {\n    \n    return (\n        <div className=\"uncompleted\">\n                <ToDoForm />\n            <span className=\"tag-info total-to-do\">Total: {total}</span>\n            <span className=\"tag-info uncompleted-to-do\">To do: {toDos.length}</span>\n            <span className=\"tag-info completed-to-do\">Completed: {total - toDos.length}</span>\n\n            <h3 className=\"list-title\">To do ({toDos.length})</h3>\n\n            {toDos.map((toDo) => (\n                <ToDo key={toDo.id} title={toDo.title} completed={toDo.completed} userId={toDo.userId} id={toDo.id} />\n            ))}\n        </div>\n    )\n}\n\nexport default UncompletedToDo","import React, { useEffect, useReducer, useState } from \"react\"\nimport {ToDoContext, reducer, initialState} from \"../context/ToDoContext/ToDoContext\"\nimport { IProcessedToDoData, IToDo } from \"../types\"\nimport CompletedToDo from \"./CompletedToDo\"\nimport UncompletedToDo from \"./UncompletedToDo\"\n\nconst ToDoList: React.FC = () => {\n    const [uncompletedList, setUncompletedList] = useState<IToDo[]>([])\n    const [completedList, setCompletedList] = useState<IToDo[]>([])\n    const [state, dispatch] = useReducer(reducer, initialState)\n    useEffect(() => {\n        let cleanUpFunction = false\n        if (!cleanUpFunction) {\n            (async function () {\n                const data: IToDo[] = await (await fetch('https://jsonplaceholder.typicode.com/todos?_limit=10')).json()\n\n                const processedData: IProcessedToDoData = data.reduce((acc: IProcessedToDoData, item) => {\n\n                    if (item.completed) {\n                        acc.completed.push(item)\n                    } else {\n                        acc.unCompleted.push(item)\n                    }\n                    return acc\n                }, { unCompleted: [], completed: [] })\n                setUncompletedList(processedData.unCompleted);\n                setCompletedList(processedData.completed)\n            })()\n        }\n        return () => { cleanUpFunction = true }\n    }, [])\n\n    return (\n        <ToDoContext.Provider value={{...state, setUncompletedList, setCompletedList, dispatch}}>\n            <UncompletedToDo toDos={uncompletedList} total={uncompletedList.length + completedList.length} />\n            <CompletedToDo toDos={completedList} />\n        </ToDoContext.Provider>\n    )\n}\n\nexport default ToDoList","import React from \"react\"\nimport Dashboard from \"../components/Dashboard\"\nimport Header from \"../components/Header\"\nimport ToDoList from \"../components/ToDoList\"\n\nconst MainPage: React.FC = () => {\n    return (\n        <>\n            <Header />\n            <Dashboard />\n            <main className=\"content\">\n                <ToDoList />\n            </main>\n        </>\n    )\n}\n\nexport default MainPage","import React from 'react';\nimport MainPage from './pages/MainPage';\n\nfunction App() {\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}